CREATE TABLE IF NOT EXISTS users (
    user_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    phone_number VARCHAR(12) UNIQUE NOT NULL,
    user_password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP NOT NULL,
    last_login TIMESTAMP
);


CREATE TABLE IF NOT EXISTS sets (
    set_id SERIAL PRIMARY KEY,
    set_name VARCHAR(50) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, 
    updated_at TIMESTAMP NULL,
    flashcard_count INTEGER DEFAULT 0,
    user_id INTEGER REFERENCES users (user_id)
);

CREATE TABLE IF NOT EXISTS flashcards (
	flashcard_id SERIAL PRIMARY KEY,
	front VARCHAR (50) NOT NULL,
	back VARCHAR (50) NOT NULL,
	set_id INTEGER REFERENCES sets (set_id)
);

CREATE TABLE IF NOT EXISTS progress (
	progress_id SERIAL PRIMARY KEY,
	user_id INTEGER REFERENCES users (user_id),
	flashcard_id INTEGER REFERENCES flashcards (flashcard_id),
	last_reviewd TIMESTAMP,
	is_learned BOOLEAN
);

CREATE TABLE IF NOT EXISTS notifications (
	notification_id  SERIAL PRIMARY KEY,
	user_id INTEGER REFERENCES users (user_id),
	notification_content VARCHAR (50) NOT NULL,
	timestamp TIMESTAMP
);




CREATE OR REPLACE FUNCTION update_flashcard_count() RETURNS TRIGGER AS $$
BEGIN
  IF TG_OP = 'INSERT' THEN
    UPDATE sets SET flashcard_count = flashcard_count + 1 WHERE set_id = NEW.set_id;
  ELSIF TG_OP = 'DELETE' THEN
    UPDATE sets SET flashcard_count = flashcard_count - 1 WHERE set_id = OLD.set_id;
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_flashcard_count_after_insert
AFTER INSERT ON flashcards
FOR EACH ROW EXECUTE FUNCTION update_flashcard_count();

CREATE TRIGGER update_flashcard_count_after_delete
AFTER DELETE ON flashcards
FOR EACH ROW EXECUTE FUNCTION update_flashcard_count();




CREATE OR REPLACE FUNCTION update_set_timestamp() RETURNS TRIGGER AS $$
BEGIN
  IF TG_TABLE_NAME = 'sets' AND TG_OP IN ('UPDATE') THEN
    NEW.updated_at = CURRENT_TIMESTAMP;
  ELSIF TG_TABLE_NAME = 'flashcards' AND TG_OP IN ('INSERT', 'UPDATE', 'DELETE') THEN
    UPDATE sets
    SET updated_at = CURRENT_TIMESTAMP
    WHERE set_id = COALESCE(NEW.set_id, OLD.set_id);
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;



CREATE TRIGGER set_after_update
AFTER UPDATE ON sets
FOR EACH ROW
EXECUTE FUNCTION update_set_timestamp();


CREATE TRIGGER flashcard_after_insert
AFTER INSERT ON flashcards
FOR EACH ROW
EXECUTE FUNCTION update_set_timestamp();

CREATE TRIGGER flashcard_after_update
AFTER UPDATE ON flashcards
FOR EACH ROW
EXECUTE FUNCTION update_set_timestamp();

CREATE TRIGGER flashcard_after_delete
AFTER DELETE ON flashcards
FOR EACH ROW
EXECUTE FUNCTION update_set_timestamp();
